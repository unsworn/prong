// Exports boxes from Adobe Illustrator/** * json encoder.. */function array2json(arr){    var parts = [];    var is_list = (Object.prototype.toString.apply(arr) === '[object Array]');    for(var key in arr)    {    	var value = arr[key];        if(typeof value == "object")  //Custom handling for arrays        {            if(is_list)                parts.push(array2json(value)); /* :RECURSION: */                        else                parts[key] = array2json(value); /* :RECURSION: */        }        else        {            var str = "";            if(!is_list) str = '"' + key + '":';            //Custom handling for multiple data types            if(typeof value == "number")                str += value; //Numbers            else if(value === false)                str += 'false'; //The booleans            else if(value === true)                str += 'true';            else                str += '"' + value + '"'; //All other things            // :TODO: Is there any more datatype we should be in the lookout for? (Functions?)            parts.push(str);        }    }    var json = parts.join(",");        if(is_list)        return '[' + json + ']';//Return numerical JSON    return '{' + json + '}';//Return associative JSON}function readProperties(item){    var out  = {};    var data = item.note;        var parts = data.split(";");        for (var i=0 ; i < parts.length ; i++)    {        var part = parts[i];                var keyVal = part.split("=");                if (keyVal.length == 2)            out[keyVal[0]] = keyVal[1];    }        return out;}function Bounds(){    this.x = 0;    this.y = 0;    this.w = 0;    this.h = 0;        this.set = function(x, y, w, h)    {        this.x = x;        this.y = y;        this.w = w;        this.h = h;    }        this.size = function(w, h)    {        this.w = w;        this.h = h;    }        this.position = function(x, y)    {        this.x = x;        this.y = y;    }}/** * Game object specification */function GameObject(){        this.absoluteBounds = undefined;    this.relativeBounds = undefined;    this.name = undefined;        this.type = undefined;        this.clz  = undefined;            this.copy(doc, item, prop)    {        var note   = item.note;                var b = item.geometricBounds;                var pW = (b[2] - b[0]);        var pH  = Math.abs(b[3] - b[1]);        var pX  = b[0];        var pY  = Math.abs(b[1]);                var rX = (pX / doc.width);        var rW = (pW / doc.width);        var rY = (pY / doc.height);        var rH = (pH / doc.height);                this.absoluteBounds = new Bounds();                this.absoluteBounds.set(pX, pY, pW, pH);                this.relativeBounds = new Bounds();                this.relativeBounds.set(rX, rY, rW, rH);                    }}var doc = app.activeDocument;var items = doc.pageItems;//alert(doc.cropBox);//alert(doc.name);//doc.pathItems.rectangle(0, 0, 200, 100);//alert(doc.width);//alert(doc.height);//var docWidth  = doc.width;//var docHeight = doc.height;var a = new Array();for (var i=0 ; i < items.length ; i++){    var item = items[i];    var prop = readProperties(item);        if (!('game.name' in prop))        continue;        var obj = new GameObject();        obj.copy(doc, item, prop);        a.push(obj);}var color = new  RGBColor();color.red = 255;var out = doc.pathItems.rectangle(0, -10, 10, 10);out.note = array2json(a);out.fillColor = color;